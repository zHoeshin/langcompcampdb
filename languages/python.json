{
  "description": "General purpose dynamically typed object oriented language",
  "features": {
    "general": [
      {"description": "Block/scope", "code": "indentation", "id": "g-block"},
      {"description": "Comment", "code": "# ...", "example": "# some comment", "id": "g-comment"},
      {"description": "Multiline comment(not nestable)", "code": "\"\"\" ... \"\"\"", "example": "\"\"\"some comment goes here\"\"\"", "id": "g-comment-m"},
      {"description": "Documentation comment", "code": "\"\"\" ... \"\"\"", "example": "", "id": "g-comment-d"},
      {"description": "Identifier regex", "code": "[A-Za-z_][A-Za-z_0-9]*", "example": "abc123", "id": "g-idregex"},
      {"description": "Case sensitivity", "code": "Sensitive", "id": "g-casesensitive"},
      {"description": "Default capitalization rules", "code": "CamelCase or camelcase", "example": "SomeName anothername", "id": "g-capitalization"},
      {"description": "Typing", "code": "ident: type", "example": "x: int", "id": "g-type"}
    ],
    "general-operators": [
      {"type": "column", "id": "precedence"},
      {"type": "header", "code": "OP", "description": "Name", "example": "Example", "precedence": "Precedence"},
      {"description": "Addition", "code": "+", "example": "a + b", "id": "g-op-add", "precedence": "7"},
      {"description": "Subtraction", "code": "-", "example": "a - b", "id": "g-op-sub", "precedence": "7"},
      {"description": "Multiplication", "code": "*", "example": "a * b", "id": "g-op-mul", "precedence": "6"},
      {"description": "Division", "code": "/", "example": "a / b", "id": "g-op-div-float", "precedence": "6"},
      {"description": "Exponentiation", "code": "**", "example": "a ** b", "id": "g-op-exp", "precedence": "4"},
      {"description": "Modulo", "code": "%", "example": "a % b", "id": "g-op-modulo", "precedence": "6"},
      {"description": "Bitwise AND", "code": "&", "example": "a & b", "id": "g-op-b-and", "precedence": "9"},
      {"description": "Bitwise OR", "code": "|", "example": "a | b", "id": "g-op-b-or", "precedence": "11"},
      {"description": "Bitwise XOR", "code": "^", "example": "a ^ b", "id": "g-op-b-xor", "precedence": "10"},
      {"description": "Bitwise NOT", "code": "~", "example": "~a", "id": "g-op-b-not", "precedence": "5"},
      {"description": "Logical AND", "code": "and", "example": "a and b", "id": "g-op-l-and", "precedence": "14"},
      {"description": "Logical OR", "code": "or", "example": "a or b", "id": "g-op-l-or", "precedence": "15"},
      {"description": "Logical NOT", "code": "not", "example": "not a", "id": "g-op-l-not", "precedence": "13"},
      {"description": "Matrix multiplication", "code": "@", "example": "a @ b", "id": "g-op-matmul", "precedence": "6"},
      {"description": "Negation", "code": "-", "example": "-a", "id": "g-op-neg", "precedence": "5"}
    ],
    "comparison": [
      {"type": "column", "id": "precedence"},
      {"type": "header", "code": "OP", "description": "Name", "example": "Example", "precedence": "Precedence"},
      {"description": "Equal", "code": "==", "example": "1==1", "id": "g-op-c-eq", "precedence": "12"},
      {"description": "Not equal", "code": "!=", "example": "1!=2", "id": "g-op-c-neq", "precedence": "12"},
      {"description": "Greater than", "code": ">", "example": "2>1", "id": "g-op-c-greater", "precedence": "12"},
      {"description": "Less than", "code": "<", "example": "1<2", "id": "g-op-c-less", "precedence": "12"},
      {"description": "Greater than or equal to", "code": ">=", "example": "1>=1", "id": "g-op-c-greatereq", "precedence": "12"},
      {"description": "Less than or equal to", "code": "<=", "example": "2<=2", "id": "g-op-c-lesseq", "precedence": "12"}
    ],
    "control-flow": [
      {"description": "if then", "code": "if c:\n\tt", "example": "``if a == 5:\n\tprint('5')``", "id": "cf-i"},
      {"description": "if then-else", "code": "if c1:\n\tt\nelif c2:\n\tf", "example": "``if a == 5:\n\tprint('5')\nelse:\n\tprint('?')``", "id": "cf-ie"},
      {"description": "if then-else if then-else", "code": "if c1:\n\tt\nelif c2:\n\tf\nelif:\n\te", "example": "``if a == 5:\n\tprint('5')\nelif a == '-2'\n\tprint('t')\nelse:\n\tprint('?')``", "id": "cf-iee"},
      {"description": "while", "code": "while c: ...", "example": "``while timer < 10:\n\ttimer += 1``", "id": "cf-while"},
      {"description": "for", "code": "for i in iterable: ...", "example": "for a in array: print(a)", "id": "cf-for-in"},
      {"description": "try-except", "code": "try:\n\ts\nexcept e:\n\td", "example": "``try:\n\tprint(5/0)\nexcept ZeroDivisionError:\n\tprint('Cannot divide by 0')``", "id": "cf-try"},
      {"description": "continue", "code": "continue", "example": " ", "id": "cf-continue"},
      {"description": "break", "code": "break", "example": " ", "id": "cf-break"}
    ],
    "functions": [
      {"description": "Define function", "code": "def name(...args):\n\tbody", "example": "``def foo(name):\n\tprint(f'Hello, {name}!')``", "id": "f-define"},
      {"description": "Call function", "code": "funcname(...args)", "example": "print('Hello', 'World')", "id": "f-call"},
      {"description": "Return", "code": "return", "example": "``return\nreturn someval``", "id": "f-return"},
      {"description": "Anonymous function", "code": "lambda ...args: body", "example": "lambda a, b: a + b", "id": "f-lambda"}
    ],
    "objects": [
      {"description": "CLass Identifier", "code": "class", "example": "``class Foo:\n\t...``", "id": "o-class"},
      {"description": "Structure Identifier", "code": "@dataclass\nclass", "example": "``from dataclasses import dataclass\n@dataclass\nclass Foo:\n\t...``", "id": "o-struct"},
      {"description": "Self value", "code": "first method param", "example": "``class Foo:\n\tdef __init__(self):\n\t\t...``", "id": "o-self"},
      {"description": "Constructor", "code": "def __init__(...)", "example": "``class Foo:\n\tdata: int\n\tdef __init__(self, d):\n\t\tself.data = d``", "id": "o-constructor"},
      {"description": "Method calling", "code": "object.method()", "example": "player.damage(5)", "id": "o-method"},
      {"description": "Member accessing", "code": "object.member", "example": "player.health", "id": "o-member-call"},
      {"description": "Method definition", "code": "def name(...args):\n\tbody", "example": "``class Foo:\n\tdata: int\n\tdef setValue(self, d):\n\t\tself.data = d``", "id": "o-method-define"},
      {"description": "Inheritance", "code": "()", "example": "class Foo(Baz):\n\t...", "id": "o-inheritance"},
      {"description": "Instantiation", "code": "class(...args)", "example": "Foo(5)", "id": "o-new"}
    ],
    "modules": [
      {"description": "Import", "code": "import package", "example": "", "id": "m-i"},
      {"description": "Selective import", "code": "from package import item1, item2...", "example": "from colorama import Fore, Back", "id": "m-i-s"},
      {"description": "Import all into current scope", "code": "from package import *", "example": "from colorama import *", "id": "m-i-dump"},
      {"description": "Aliasing", "code": "import package as alias", "example": "import colorama as c", "id": "m-i-a"},
      {"description": "Selective export", "code": "__all__ = [...]", "example": "__all__ = [Fore, Back]", "id": "m-e-s"}
    ]
  }
}
