{
  "description": "General purpose dynamically typed object-oriented and functional language used primarily for web development",
  "features": {
    "general": [
      {"description": "Block/scope", "code": "{}", "id": "g-block"},
      {"description": "Comment", "code": "// ...", "example": "// comment", "id": "g-comment"},
      {"description": "Multiline comment", "code": "/* ... */", "example": "/* comment */", "id": "g-comment-m"},
      {"description": "Documentation comment", "code": "/** ... */", "example": "/** doc comment */", "id": "g-comment-d"},
      {"description": "Identifier regex", "code": "[A-Za-z_$][A-Za-z0-9_$]*", "example": "$someVar5", "id": "g-idregex"},
      {"description": "Case sensitivity", "code": "Sensitive", "id": "g-casesensitive"},
      {"description": "Default capitalization rules", "code": "camelCase or PascalCase", "example": "someVar SomeClass", "id": "g-capitalization"}
    ],
    "general-operators": [
      {"type": "column", "id": "precedence"},
      {"type": "header", "code": "OP", "description": "Name", "example": "Example", "precedence": "Precedence"},
      {"description": "Addition", "code": "+", "example": "a + b", "id": "g-op-add", "precedence": "13"},
      {"description": "Subtraction", "code": "-", "example": "a - b", "id": "g-op-sub", "precedence": "13"},
      {"description": "Multiplication", "code": "*", "example": "a * b", "id": "g-op-mul", "precedence": "14"},
      {"description": "Division", "code": "/", "example": "a / b", "id": "g-op-div-float", "precedence": "14"},
      {"description": "Exponentiation", "code": "**", "example": "a ** b", "id": "g-op-exp", "precedence": "15"},
      {"description": "Modulo", "code": "%", "example": "a % b", "id": "g-op-modulo", "precedence": "14"},
      {"description": "Bitwise AND", "code": "&", "example": "a & b", "id": "g-op-b-and", "precedence": "9"},
      {"description": "Bitwise OR", "code": "|", "example": "a | b", "id": "g-op-b-or", "precedence": "7"},
      {"description": "Bitwise XOR", "code": "^", "example": "a ^ b", "id": "g-op-b-xor", "precedence": "8"},
      {"description": "Bitwise NOT", "code": "~", "example": "~a", "id": "g-op-b-not", "precedence": "16"},
      {"description": "Logical AND", "code": "&&", "example": "a && b", "id": "g-op-l-and", "precedence": "6"},
      {"description": "Logical OR", "code": "||", "example": "a || b", "id": "g-op-l-or", "precedence": "5"},
      {"description": "Logical NOT", "code": "!", "example": "!a", "id": "g-op-l-not", "precedence": "16"},
      {"description": "Negation", "code": "-", "example": "-a", "id": "g-op-neg", "precedence": "16"}
    ],
    "comparison": [
      {"type": "column", "id": "precedence"},
      {"type": "header", "code": "OP", "description": "Name", "example": "Example", "precedence": "Precedence"},
      {"description": "Equal (loose)", "code": "==", "example": "1 == '1'", "id": "g-op-c-eq", "precedence": "10"},
      {"description": "Not equal (loose)", "code": "!=", "example": "1 != 2", "id": "g-op-c-neq", "precedence": "10"},
      {"description": "Equal (strict)", "code": "===", "example": "1 === 1", "id": "g-op-c-eq-strict", "precedence": "10"},
      {"description": "Not equal (strict)", "code": "!==", "example": "1 !== '1'", "id": "g-op-c-neq-strict", "precedence": "10"},
      {"description": "Greater than", "code": ">", "example": "2 > 1", "id": "g-op-c-greater", "precedence": "11"},
      {"description": "Less than", "code": "<", "example": "1 < 2", "id": "g-op-c-less", "precedence": "11"},
      {"description": "Greater than or equal to", "code": ">=", "example": "1 >= 1", "id": "g-op-c-greatereq", "precedence": "11"},
      {"description": "Less than or equal to", "code": "<=", "example": "2 <= 2", "id": "g-op-c-lesseq", "precedence": "11"}
    ],
    "control-flow": [
      {"description": "if then", "code": "if (cond) { ... }", "example": "if (a === 5) {\n\tconsole.log('5');\n}", "id": "cf-i"},
      {"description": "if then-else", "code": "if (c1) { ... } else { ... }", "example": "if (a === 5) {\n\t...\n} else {\n\t...\n}", "id": "cf-ie"},
      {"description": "if-else if-else", "code": "if (c1) {...} else if (c2) {...} else {...}", "example": "if (a === 5) {\n\t...\n} else if (a === -2) {\n\t...\n} else {\n\t...\n}", "id": "cf-iee"},
      {"description": "while", "code": "while (cond) { ... }", "example": "while (x < 10) {\n\tx++;\n}", "id": "cf-while"},
      {"description": "for loop", "code": "for (init; cond; inc) { ... }", "example": "for (let i = 0; i < 5; i++) {\n\t...\n}", "id": "cf-for"},
      {"description": "for-in loop", "code": "for (key in obj) { ... }", "example": "for (let key in obj) {\n\tconsole.log(key);\n}", "id": "cf-for-key"},
      {"description": "for-of loop", "code": "for (item of iterable) { ... }", "example": "for (let val of arr) {\n\tconsole.log(val);\n}", "id": "cf-for-val"},
      {"description": "try-catch", "code": "try { ... } catch (e) { ... }", "example": "try {\n\t...\n} catch (e) {\n\tconsole.error(e);\n}", "id": "cf-try"},
      {"description": "continue", "code": "continue", "example": " ", "id": "cf-continue"},
      {"description": "break", "code": "break", "example": " ", "id": "cf-break"}
    ],
    "functions": [
      {"description": "Define function", "code": "function name(...args) { ... }", "example": "function greet(name) {\n\tconsole.log(`Hello, ${name}`);\n}", "id": "f-define"},
      {"description": "Arrow function", "code": "const name = (...args) => { ... }", "example": "const add = (a, b) => a + b;", "id": "f-arrow"},
      {"description": "Call function", "code": "funcname(...args)", "example": "greet('World');", "id": "f-call"},
      {"description": "Return", "code": "return", "example": "return x;", "id": "f-return"},
      {"description": "Anonymous function", "code": "function (...) { ... }", "example": "setTimeout(function() { ... }, 1000);", "id": "f-lambda"}
    ],
    "objects": [
      {"description": "Class declaration", "code": "class ClassName { ... }", "example": "class Foo {\n\tconstructor() { }\n}", "id": "o-class"},
      {"description": "Constructor", "code": "constructor(...args) { ... }", "example": "constructor(val) {\n\tthis.x = val;\n}", "id": "o-constructor"},
      {"description": "Method definition", "code": "methodName(...) { ... }", "example": "setX(val) {\n\tthis.x = val;\n}", "id": "o-method-define"},
      {"description": "Method calling", "code": "object.method()", "example": "foo.bar()", "id": "o-method"},
      {"description": "Member accessing", "code": "object.member", "example": "foo.bar", "id": "o-member-call"},
      {"description": "Instantiation", "code": "new ClassName(...args)", "example": "let f = new Foo(5);", "id": "o-new"},
      {"description": "Inheritance", "code": "class Sub extends Super", "example": "class B extends A { }", "id": "o-inheritance"},
      {"description": "This value", "code": "this", "example": "this.x", "id": "o-self"}
    ],
    "modules": [
      {"description": "Import", "code": "import pkg from 'pkg'", "example": "import fs from 'fs'", "id": "m-i"},
      {"description": "Selective import", "code": "import { x, y } from 'pkg'", "example": "import { readFile } from 'fs'", "id": "m-i-s"},
      {"description": "Import all", "code": "import * as name from 'pkg'", "example": "import * as utils from './utils'", "id": "m-i-dump"},
      {"description": "Aliasing", "code": "import { x as y } from 'pkg'", "example": "import { readFile as rf } from 'fs'", "id": "m-i-a"},
      {"description": "Export item", "code": "export const x = ...", "example": "export const name = 'JS';", "id": "m-e-s"}
    ]
  }
}
